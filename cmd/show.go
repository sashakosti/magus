package cmd

import (
	"fmt"
	"magus/player"
	"magus/rpg"
)

func Show() {
	p, err := player.LoadPlayer()
	if err != nil {
		if err == player.ErrPlayerNotFound {
			fmt.Println("üîÆ –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ, –∑–∞–ø—É—Å—Ç–∏–≤ `magus` –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
			return
		}
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å player.json:", err)
		return
	}

	fmt.Printf("üßô –ò–º—è: %s\n", p.Name)
	if p.Class != player.ClassNone {
		fmt.Printf("üéñÔ∏è –ö–ª–∞—Å—Å: %s\n", p.Class)
	}
	fmt.Printf("üìà –£—Ä–æ–≤–µ–Ω—å: %d\n", p.Level)
	fmt.Printf("üîã XP: %d / %d\n", p.XP, p.NextLevelXP)
	fmt.Printf("‚ú® –û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤: %d\n", p.SkillPoints)

	if len(p.UnlockedSkills) > 0 {
		fmt.Println("üéÅ –ü–µ—Ä–∫–∏:")
		skillTrees, err := rpg.LoadSkillTrees(p)
		if err != nil {
			fmt.Println("  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ä–µ–≤–æ –Ω–∞–≤—ã–∫–æ–≤:", err)
		} else {
			fmt.Println("\n--- –û–±—â–∏–µ –Ω–∞–≤—ã–∫–∏ ---")
			if len(skillTrees.Common) == 0 {
				fmt.Println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤.")
			} else {
				for _, node := range skillTrees.Common {
					unlocked := ""
					if rpg.IsSkillUnlocked(p, node.ID) {
						unlocked = "[–ò–ó–£–ß–ï–ù–û]"
					}
					fmt.Printf("- %s %s\n  %s\n", node.Name, unlocked, node.Description)
				}
			}

			fmt.Println("\n--- –ö–ª–∞—Å—Å–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ ---")
			if len(skillTrees.Class) == 0 {
				fmt.Println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.")
			} else {
				for _, node := range skillTrees.Class {
					unlocked := ""
					if rpg.IsSkillUnlocked(p, node.ID) {
						unlocked = "[–ò–ó–£–ß–ï–ù–û]"
					}
					fmt.Printf("- %s %s\n  %s\n", node.Name, unlocked, node.Description)
				}
			}
		}
	}
}
