package cmd

import (
	"fmt"
	"magus/player"
	"magus/storage"
	"os"
	"time"
)

func Complete() {
	if len(os.Args) < 3 {
		fmt.Println("Usage: magus complete <quest_id>")
		return
	}
	questID := os.Args[2]

	quests, err := storage.LoadAllQuests()
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤:", err)
		return
	}

	var completedQuest player.Quest
	var found bool

	for i, q := range quests {
		if q.ID == questID {
			if q.Completed {
				fmt.Println("‚ö†Ô∏è –ö–≤–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
				return
			}

			switch q.Type {
			case player.TypeGoal:
				fmt.Println("‚ö†Ô∏è –¶–µ–ª–∏ (Goal) –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏.")
				return
			case player.TypeRitual:
				fmt.Println("üíß –†–∏—Ç—É–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω. –ú–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–≤ TUI).")
				// –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–∞–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ TUI, –∑–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
			case player.TypeFocus:
				quests[i].Completed = true
				quests[i].CompletedAt = time.Now()
				quests[i].Progress = q.HP // –°—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
				addXP(q.XP)
				fmt.Println("‚úÖ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
			}

			completedQuest = quests[i]
			found = true
			break
		}
	}

	if !found {
		fmt.Println("‚ö†Ô∏è –ö–≤–µ—Å—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	if err := storage.SaveAllQuests(quests); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤:", err)
		return
	}

	if completedQuest.ParentID != "" {
		checkAndCompleteParent(completedQuest.ParentID)
	}
}

// checkAndCompleteParent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π.
func checkAndCompleteParent(parentID string) {
	quests, err := storage.LoadAllQuests()
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ:", err)
		return
	}

	subQuestsCompleted := true
	parentQuestIndex := -1

	for i, q := range quests {
		if q.ID == parentID {
			parentQuestIndex = i
			continue
		}
		if q.ParentID == parentID && !q.Completed {
			subQuestsCompleted = false
			break
		}
	}

	if parentQuestIndex != -1 && subQuestsCompleted {
		parent := &quests[parentQuestIndex]
		if !parent.Completed {
			parent.Completed = true
			parent.CompletedAt = time.Now()
			fmt.Printf("üéâ –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–≤–µ—Å—Ç '%s' –∑–∞–≤–µ—Ä—à—ë–Ω!", parent.Title)
			addXP(parent.XP)

			if err := storage.SaveAllQuests(quests); err != nil {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–≤–µ—Å—Ç–∞:", err)
			}
		}
	}
}

// addXP –Ω–∞—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è.
func addXP(xp int) {
	if xp <= 0 {
		return
	}

	canLevelUp, err := player.AddXP(xp)
	if err != nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å XP:", err)
	} else {
		fmt.Printf("‚ú® +%d XP!\n", xp)
		if canLevelUp {
			fmt.Println("üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ `magus` –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∫–∞ –∏–ª–∏ –∫–ª–∞—Å—Å–∞.")
		}
	}
}

func isFirstQuestOfDay(p *player.Player) bool {
	return !isToday(p.LastCompletedAt)
}
