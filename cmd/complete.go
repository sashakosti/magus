package cmd

import (
	"fmt"
	"magus/player"
	"magus/storage"
	"os"
	"strings"
	"time"
)

func Complete() {
	if len(os.Args) < 3 {
		fmt.Println("Usage: magus complete <quest_id>")
		return
	}
	questID := os.Args[2]

	quests, err := storage.LoadAllQuests()
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤:", err)
		return
	}

	var completedQuest player.Quest
	var found bool
	var xpGained int

	// –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–µ—Å—Ç
	for i, q := range quests {
		if q.ID == questID {
			if q.Completed || (q.Type == player.Daily && isToday(q.CompletedAt)) {
				fmt.Println("‚ö†Ô∏è –ö–≤–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
				return
			}
			quests[i].Completed = true
			quests[i].CompletedAt = time.Now()
			xpGained = q.XP
			completedQuest = quests[i]
			found = true
			break
		}
	}

	if !found {
		fmt.Println("‚ö†Ô∏è –ö–≤–µ—Å—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := storage.SaveAllQuests(quests); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–æ–≤:", err)
		return
	}
	fmt.Println("‚úÖ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
	addXP(xpGained, completedQuest.Type)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–≤–µ—Å—Ç
	if completedQuest.ParentID != "" {
		checkAndCompleteParent(completedQuest.ParentID)
	}
}

// checkAndCompleteParent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π.
func checkAndCompleteParent(parentID string) {
	quests, err := storage.LoadAllQuests()
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ:", err)
		return
	}

	var subQuestsCompleted = true
	var parentQuestIndex = -1

	for i, q := range quests {
		if q.ID == parentID {
			parentQuestIndex = i
			continue
		}
		if q.ParentID == parentID && !q.Completed {
			subQuestsCompleted = false
			break
		}
	}

	if parentQuestIndex != -1 && subQuestsCompleted {
		parent := &quests[parentQuestIndex]
		if !parent.Completed {
			parent.Completed = true
			parent.CompletedAt = time.Now()
			fmt.Printf("üéâ –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–≤–µ—Å—Ç '%s' –∑–∞–≤–µ—Ä—à—ë–Ω!\n", parent.Title)
            addXP(parent.XP, parent.Type) // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–≤–µ—Å—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞

			if err := storage.SaveAllQuests(quests); err != nil {
				fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–≤–µ—Å—Ç–∞:", err)
			}
		}
	}
}

// addXP –Ω–∞—á–∏—Å–ª—è–µ—Ç –æ–ø—ã—Ç —Å —É—á–µ—Ç–æ–º –∫–ª–∞—Å—Å–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –ø–µ—Ä–∫–æ–≤, –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è.
func addXP(xp int, questType player.QuestType) {
	if xp <= 0 {
		return
	}

	p, err := player.LoadPlayer()
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è XP:", err)
		return
	}

	totalXP := xp
	bonusMessages := []string{}

	// 1. –ö–ª–∞—Å—Å–æ–≤—ã–µ –±–æ–Ω—É—Å—ã
	classBonus := 0
	switch p.Class {
	case player.ClassMage:
		if questType == player.Arc || questType == player.Epic {
			bonus := 15
			if hasPerk(p, "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∑–æ–Ω–∞–Ω—Å") {
				bonus = 25
			}
			classBonus = totalXP * bonus / 100
			if classBonus > 0 {
				bonusMessages = append(bonusMessages, fmt.Sprintf("+%d –±–æ–Ω—É—Å –∫–ª–∞—Å—Å–∞", classBonus))
			}
		}
	case player.ClassWarrior:
		if hasPerk(p, "–ë–æ–µ–≤–æ–π —Ä–∞–∂") && questType == player.Daily {
			classBonus = 5
			bonusMessages = append(bonusMessages, fmt.Sprintf("+%d –±–æ–Ω—É—Å –ø–µ—Ä–∫–∞", classBonus))
		}
	}
	totalXP += classBonus

	// 2. –ë–æ–Ω—É—Å—ã –æ—Ç –ø–µ—Ä–∫–æ–≤
	perkBonus := 0
	if hasPerk(p, "–§–æ–∫—É—Å") && isFirstQuestOfDay(p) {
		perkBonus += 5
		bonusMessages = append(bonusMessages, "+5 –§–æ–∫—É—Å")
	}
	if hasPerk(p, "–ö–æ–º–±–æ-—Å—Ç—Ä–∏–∫") && time.Since(p.LastCompletedAt).Hours() < 1 {
		perkBonus += 5
		bonusMessages = append(bonusMessages, "+5 –ö–æ–º–±–æ")
	}
	totalXP += perkBonus

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–≤–µ—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
	p.LastCompletedAt = time.Now()
	player.SavePlayer(p)

	// –ù–∞—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ–ø—ã—Ç
	canLevelUp, err := player.AddXP(totalXP)
	if err != nil {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å XP:", err)
	} else {
		if len(bonusMessages) > 0 {
			fmt.Printf("‚ú® +%d XP (%s)!\n", totalXP, strings.Join(bonusMessages, ", "))
		} else {
			fmt.Printf("‚ú® +%d XP!\n", totalXP)
		}
		if canLevelUp {
			fmt.Println("üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å! –ó–∞–ø—É—Å—Ç–∏—Ç–µ `magus` –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∫–∞ –∏–ª–∏ –∫–ª–∞—Å—Å–∞.")
		}
	}
}

func isFirstQuestOfDay(p *player.Player) bool {
	return !isToday(p.LastCompletedAt)
}



