package tui

import (
	"fmt"
	"magus/player"
	"magus/storage"
	"time"

	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/list"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

type QuestsState struct {
	list          list.Model
	allQuests     []player.Quest // –ú–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤
	statusMessage string
}

func NewQuestsState(m *Model) *QuestsState {
	s := &QuestsState{allQuests: m.Quests}

	delegate := NewQuestDelegate(&m.styles)
	questList := list.New(nil, delegate, 0, 0) // Start with an empty list
	questList.Title = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã"
	questList.Styles.Title = m.styles.TitleStyle
	questList.SetShowStatusBar(false)
	questList.SetShowHelp(true)
	questList.AdditionalShortHelpKeys = func() []key.Binding {
		return []key.Binding{
			key.NewBinding(key.WithKeys("a"), key.WithHelp("a", "–¥–æ–±–∞–≤–∏—Ç—å")),
			key.NewBinding(key.WithKeys("d"), key.WithHelp("d", "—É–¥–∞–ª–∏—Ç—å")),
			key.NewBinding(key.WithKeys("tab"), key.WithHelp("tab", "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å")),
		}
	}
	questList.AdditionalFullHelpKeys = func() []key.Binding {
		return questList.AdditionalShortHelpKeys()
	}

	s.list = questList
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
	s.list.SetItems(BuildQuestListItems(s.allQuests, s.list.Items()))
	return s
}

func (s *QuestsState) Init() tea.Cmd {
	return nil
}

func (s *QuestsState) Update(m *Model, msg tea.Msg) (State, tea.Cmd) {
	var cmds []tea.Cmd

	// tea.WindowSizeMsg is handled by the main model
	switch msg := msg.(type) {
	case tea.KeyMsg:
		if s.list.FilterState() == list.Filtering {
			break
		}
		switch {
		case key.Matches(msg, key.NewBinding(key.WithKeys("a"))):
			// –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
			return NewAddQuestState(m), nil
		case key.Matches(msg, key.NewBinding(key.WithKeys("enter"))):
			return s.completeQuest(m)
		case key.Matches(msg, key.NewBinding(key.WithKeys("d", "delete"))):
			return s.deleteQuest(m)
		case key.Matches(msg, key.NewBinding(key.WithKeys("tab"))):
			s.toggleQuestExpansion()
			return s, nil
		case key.Matches(msg, key.NewBinding(key.WithKeys("q", "esc"))):
			return PopState{}, nil
		}
	}

	newListModel, cmd := s.list.Update(msg)
	s.list = newListModel
	cmds = append(cmds, cmd)

	return s, tea.Batch(cmds...)
}

func (s *QuestsState) View(m *Model) string {
	// Set the size of the list before rendering
	h, v := lipgloss.NewStyle().Margin(1, 2).GetFrameSize()
	s.list.SetSize(m.TerminalWidth-h, m.TerminalHeight-v)
	return lipgloss.NewStyle().Margin(1, 2).Render(s.list.View())
}

func (s *QuestsState) toggleQuestExpansion() {
	selectedItem, ok := s.list.SelectedItem().(QuestListItem)
	if !ok || !selectedItem.HasKids {
		return
	}

	// –ù–∞–π–¥–µ–º –∏ –æ–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ `s.list.Items()`
	for i, item := range s.list.Items() {
		qli := item.(QuestListItem)
		if qli.ID == selectedItem.ID {
			qli.IsExpanded = !qli.IsExpanded
			s.list.SetItem(i, qli) // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
			break
		}
	}

	// –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π isExpanded
	s.list.SetItems(BuildQuestListItems(s.allQuests, s.list.Items()))
}

func (s *QuestsState) deleteQuest(m *Model) (State, tea.Cmd) {
	selectedItem, ok := s.list.SelectedItem().(QuestListItem)
	if !ok {
		return s, nil
	}

	// –ù–∞–π—Ç–∏ –≤—Å–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–≤–µ—Å—Ç + –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ)
	idsToDelete := make(map[string]struct{})
	var findChildren func(parentID string)
	findChildren = func(parentID string) {
		idsToDelete[parentID] = struct{}{}
		for _, q := range s.allQuests {
			if q.ParentID == parentID {
				findChildren(q.ID)
			}
		}
	}
	findChildren(selectedItem.ID)

	// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ä–µ–∑ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
	var updatedQuests []player.Quest
	for _, q := range s.allQuests {
		if _, found := idsToDelete[q.ID]; !found {
			updatedQuests = append(updatedQuests, q)
		}
	}

	s.allQuests = updatedQuests
	m.Quests = updatedQuests // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
	storage.SaveAllQuests(m.Quests)

	// –û–±–Ω–æ–≤–ª—è–µ–º UI
	s.list.SetItems(BuildQuestListItems(s.allQuests, s.list.Items()))
	// –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —ç–ª–µ–º–µ–Ω—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–∏–ª–∏
	if s.list.Index() >= len(s.list.Items()) && len(s.list.Items()) > 0 {
		s.list.Select(len(s.list.Items()) - 1)
	}

	statusMsg := fmt.Sprintf("üóëÔ∏è –ö–≤–µ—Å—Ç '%s' –∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.", selectedItem.Title)
	return s, s.list.NewStatusMessage(statusMsg)
}

func (s *QuestsState) completeQuest(m *Model) (State, tea.Cmd) {
	selectedItem, ok := s.list.SelectedItem().(QuestListItem)
	if !ok {
		return s, nil
	}

	// –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∫–≤–µ—Å—Ç
	if selectedItem.Completed {
		return s, s.list.NewStatusMessage("‚úÖ –ö–≤–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
	}

	// –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ñ–æ–∫—É—Å-–∫–≤–µ—Å—Ç—ã –∏–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é
	if selectedItem.Type == player.TypeFocus {
		return s, s.list.NewStatusMessage("‚ùó –≠—Ç–æ—Ç –∫–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ (–ø–æ–¥–∑–µ–º–µ–ª—å–µ)")
	}

	// –ù–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ü–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —É –Ω–µ–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
	if selectedItem.Type == player.TypeGoal {
		hasIncompleteChildren := false
		for _, q := range s.allQuests {
			if q.ParentID == selectedItem.ID && !q.Completed {
				hasIncompleteChildren = true
				break
			}
		}
		if hasIncompleteChildren {
			statusMsg := fmt.Sprintf("‚ùó –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è —Ü–µ–ª–∏ '%s'", selectedItem.Title)
			return s, s.list.NewStatusMessage(statusMsg)
		}
	}

	var xpGained int
	var manaGained int
	questCompleted := false

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –≤ –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–µ
	for i, q := range s.allQuests {
		if q.ID == selectedItem.ID {
			switch q.Type {
			case player.TypeRitual:
				// –†–∏—Ç—É–∞–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –º–∞–Ω—É, –Ω–µ –¥–∞—é—Ç XP –∏ –Ω–µ "–∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è" –Ω–∞–≤—Å–µ–≥–¥–∞
				manaGained = 5 // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
				s.statusMessage = fmt.Sprintf("üíß +%d –º–∞–Ω—ã –∑–∞ —Ä–∏—Ç—É–∞–ª '%s'", manaGained, q.Title)
				// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–Ω—É
			case player.TypeFocus, player.TypeGoal:
				// –§–æ–∫—É—Å-–∫–≤–µ—Å—Ç—ã –∏ —Ü–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è, –¥–∞—é—Ç XP
				s.allQuests[i].Completed = true
				s.allQuests[i].CompletedAt = time.Now()
				s.allQuests[i].Progress = s.allQuests[i].HP // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
				xpGained = s.allQuests[i].XP
				questCompleted = true
				s.statusMessage = fmt.Sprintf("‚ú® +%d XP –∑–∞ –∫–≤–µ—Å—Ç '%s'!", xpGained, q.Title)
			}
			m.Quests[i] = s.allQuests[i] // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–µ—Å—Ç –≤ –≥–ª–∞–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
			break
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
	p, _ := player.LoadPlayer()
	p.Mana += manaGained
	if p.Mana > p.MaxMana {
		p.Mana = p.MaxMana
	}
	m.Player = p // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
	player.SavePlayer(p)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
	storage.SaveAllQuests(m.Quests)
	s.list.SetItems(BuildQuestListItems(s.allQuests, s.list.Items()))

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –æ–ø—ã—Ç
	if xpGained > 0 {
		canLevelUp, _ := player.AddXP(xpGained)
		if canLevelUp {
			levelUpState, err := NewLevelUpState(m)
			if err != nil {
				s.statusMessage = "üîÆ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
				player.LevelUpPlayer("")
				p, _ := player.LoadPlayer()
				m.Player = p
			} else {
				return levelUpState, nil
			}
		}
	}

	if !questCompleted && manaGained == 0 {
		return s, nil // –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
	}

	return s, s.list.NewStatusMessage(s.statusMessage)
}