package tui

import (
	"fmt"
	"magus/player"
	"magus/rpg"
	"magus/storage"
	"strings"
	"time"

	"github.com/charmbracelet/bubbles/progress"
	"github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// isToday –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π.
func isToday(t time.Time) bool {
	now := time.Now()
	return t.Year() == now.Year() && t.Month() == now.Month() && t.Day() == now.Day()
}

type state int

const (
	stateQuests state = iota
	stateLevelUp
	stateSkills
	stateClassChoice
)

type Model struct {
	state         state
	player        player.Player
	quests        []player.Quest
	perkChoices   []rpg.Perk
	skills        []rpg.Skill
	classChoices  []rpg.Class // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
	cursor        int
	activeQuestID string
	statusMessage string
	progressBar   progress.Model
}

func InitialModel() Model {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	quests, _ := storage.LoadAllQuests()
	p, _ := player.LoadPlayer()
	skills, _ := rpg.LoadAllSkills()

	m := Model{
		state:         stateQuests,
		player:        *p,
		quests:        quests,
		skills:        skills,
		cursor:        0,
		statusMessage: "",
		progressBar:   progress.New(progress.WithWidth(40)),
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å
	if p.Level >= 3 && p.Class == player.ClassNone {
		m.state = stateClassChoice
		m.classChoices = rpg.GetAvailableClasses()
		m.cursor = 0
		return m
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∂–¥–µ—Ç –ª–∏ –Ω–∞—Å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
	if m.player.XP >= m.player.NextLevelXP {
		perkChoices, _ := rpg.GetPerkChoices(&m.player)
		if len(perkChoices) > 0 {
			m.state = stateLevelUp
			m.perkChoices = perkChoices
			m.cursor = 0
		} else {
			player.LevelUpPlayer("")
			p, _ := player.LoadPlayer()
			m.player = *p
			m.statusMessage = "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
		}
	}

	return m
}

func (m Model) Init() tea.Cmd {
	return nil
}

func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö–æ—Ç–∫–µ–∏
		if msg.String() == "ctrl+c" {
			return m, tea.Quit
		}
		// –í—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ 'q'
		if msg.String() == "q" {
			if m.state != stateQuests {
				m.state = stateQuests
				m.cursor = 0
				m.statusMessage = ""
				return m, nil
			}
			return m, tea.Quit
		}

		// –õ–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
		switch m.state {
		case stateQuests:
			return updateQuests(msg, m)
		case stateLevelUp:
			return updateLevelUp(msg, m)
		case stateSkills:
			return updateSkills(msg, m)
		case stateClassChoice:
			return updateClassChoice(msg, m)
		}
	}
	return m, nil
}

func (m Model) View() string {
	switch m.state {
	case stateQuests:
		return viewQuests(m)
	case stateLevelUp:
		return viewLevelUp(m)
	case stateSkills:
		return viewSkills(m)
	case stateClassChoice:
		return viewClassChoice(m)
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
	}
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–≤–µ—Å—Ç–æ–≤ ---

func updateQuests(msg tea.Msg, m Model) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		if msg.String() == "up" || msg.String() == "k" || msg.String() == "down" || msg.String() == "j" {
			m.activeQuestID = ""
		}

		switch msg.String() {
		case "up", "k":
			if m.cursor > 0 {
				m.cursor--
			}
		case "down", "j":
			if m.cursor < len(m.quests)-1 {
				m.cursor++
			}
		case "s": // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞–≤—ã–∫–∞–º
			m.state = stateSkills
			m.cursor = 0
			m.statusMessage = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤."
			return m, nil
		case "enter":
			quest := m.quests[m.cursor]
			if (quest.Type == player.Daily && isToday(quest.CompletedAt)) || quest.Completed {
				return m, nil
			}
			if m.activeQuestID == quest.ID {
				var xpGained int
				if quest.Type == player.Daily {
					quest.CompletedAt = time.Now()
				} else {
					quest.Completed = true
				}
				xpGained = quest.XP
				m.quests[m.cursor] = quest
				storage.SaveAllQuests(m.quests)
				if xpGained > 0 {
					canLevelUp, _ := player.AddXP(xpGained)
					p, _ := player.LoadPlayer() // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
					m.player = *p
					if canLevelUp {
						m.state = stateLevelUp
						m.perkChoices, _ = rpg.GetPerkChoices(&m.player)
						m.cursor = 0
					}
				}
				p, _ := player.LoadPlayer()
				m.player = *p
				m.statusMessage = fmt.Sprintf("–ö–≤–µ—Å—Ç '%s' –≤—ã–ø–æ–ª–Ω–µ–Ω! +%d XP", quest.Title, xpGained)
				m.activeQuestID = ""
			} else {
				m.activeQuestID = quest.ID
				m.statusMessage = "–ù–∞–∂–º–∏—Ç–µ Enter –µ—â–µ —Ä–∞–∑ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
			}
			return m, nil
		}
	}
	return m, nil
}

// viewQuests –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–≤–µ—Å—Ç—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π.
func viewQuests(m Model) string {
	playerInfoStyle := lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("63")).
		Padding(1, 2).
		Width(40)
	questListStyle := lipgloss.NewStyle().
		Border(lipgloss.RoundedBorder()).
		BorderForeground(lipgloss.Color("205")).
		Padding(1, 2).
		Width(40)
	statusMessageStyle := lipgloss.NewStyle().
		Foreground(lipgloss.Color("240")).
		PaddingLeft(2)

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
	playerInfo := fmt.Sprintf("üßô %s (–£—Ä–æ–≤–µ–Ω—å: %d)\n", m.player.Name, m.player.Level)
	if m.player.Class != player.ClassNone {
		playerInfo += fmt.Sprintf("üéñÔ∏è –ö–ª–∞—Å—Å: %s\n", m.player.Class)
	}
	playerInfo += fmt.Sprintf("üîã XP: %d / %d\n", m.player.XP, m.player.NextLevelXP)
	progress := float64(m.player.XP) / float64(m.player.NextLevelXP)
	playerInfo += m.progressBar.ViewAs(progress)
	if len(m.player.Perks) > 0 {
		playerInfo += "\nüéÅ –ü–µ—Ä–∫–∏: " + strings.Join(m.player.Perks, ", ")
	}
	if m.player.SkillPoints > 0 {
		playerInfo += fmt.Sprintf("\n‚ú® –û—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤: %d", m.player.SkillPoints)
	}

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏
	subQuests := make(map[string][]player.Quest)
	for _, q := range m.quests {
		if q.ParentID != "" {
			subQuests[q.ParentID] = append(subQuests[q.ParentID], q)
		}
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
	displayQuests := []player.Quest{}
	for _, q := range m.quests {
		if q.ParentID != "" {
			continue
		}
		displayQuests = append(displayQuests, q)
		if children, ok := subQuests[q.ID]; ok {
			displayQuests = append(displayQuests, children...)
		}
	}
	m.quests = displayQuests // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫—É—Ä—Å–æ—Ä–∞

	// –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫
	questList := "üìú –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤:\n\n"
	for i, quest := range m.quests {
		cursor := " "
		if m.cursor == i {
			cursor = ">"
		}

		icon := "‚è≥"
		style := lipgloss.NewStyle()
		isCompleted := quest.Completed || (quest.Type == player.Daily && isToday(quest.CompletedAt))

		if isCompleted {
			icon = "‚úÖ"
			style = style.Strikethrough(true).Faint(true)
		} else if m.activeQuestID == quest.ID {
			icon = "‚åõÔ∏è"
			style = style.Bold(true)
		}

		indent := ""
		if quest.ParentID != "" {
			indent = "  ‚îî‚îÄ "
		}

		questList += style.Render(fmt.Sprintf("%s %s%s [%s] %s {id: %s}", cursor, indent, icon, quest.Type, quest.Title, quest.ID)) + "\n"
	}

	return lipgloss.JoinVertical(lipgloss.Left,
		playerInfoStyle.Render(playerInfo),
		questListStyle.Render(questList),
		statusMessageStyle.Render(m.statusMessage),
		"\n–ù–∞–∂–º–∏—Ç–µ 's' –¥–ª—è –Ω–∞–≤—ã–∫–æ–≤, 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n",
	)
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è ---

func updateLevelUp(msg tea.Msg, m Model) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "up", "k":
			if m.cursor > 0 {
				m.cursor--
			}
		case "down", "j":
			if m.cursor < len(m.perkChoices)-1 {
				m.cursor++
			}
		case "enter":
			chosenPerk := m.perkChoices[m.cursor]
			player.LevelUpPlayer(chosenPerk.Name)
			m.state = stateQuests
			p, _ := player.LoadPlayer()
			m.player = *p
			m.cursor = 0
			m.statusMessage = fmt.Sprintf("–í—ã –≤—ã—É—á–∏–ª–∏ –ø–µ—Ä–∫: %s! –ò –ø–æ–ª—É—á–∏–ª–∏ 10 –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤.", chosenPerk.Name)
			return m, nil
		}
	}
	return m, nil
}

func viewLevelUp(m Model) string {
	s := "üî• –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!\n\n"
	s += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∫:\n\n"
	for i, perk := range m.perkChoices {
		cursor := " "
		if m.cursor == i {
			cursor = ">"
		}
		s += fmt.Sprintf("%s %s: %s\n", cursor, perk.Name, perk.Description)
	}
	s += "\n–ù–∞–∂–º–∏—Ç–µ 'enter' –¥–ª—è –≤—ã–±–æ—Ä–∞.\n"
	return s
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ ---

func updateSkills(msg tea.Msg, m Model) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "up", "k":
			if m.cursor > 0 {
				m.cursor--
			}
		case "down", "j":
			if m.cursor < len(m.skills)-1 {
				m.cursor++
			}
		case "enter":
			if m.player.SkillPoints > 0 {
				skillToIncrease := m.skills[m.cursor]
				err := rpg.IncreaseSkill(&m.player, skillToIncrease.Name)
				if err != nil {
					m.statusMessage = fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err)
				} else {
					// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
					p, _ := player.LoadPlayer()
					m.player = *p
					m.statusMessage = fmt.Sprintf("–ù–∞–≤—ã–∫ '%s' —É–≤–µ–ª–∏—á–µ–Ω!", skillToIncrease.Name)
				}
			} else {
				m.statusMessage = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤."
			}
			return m, nil
		}
	}
	return m, nil
}

func viewSkills(m Model) string {
	s := fmt.Sprintf("üß† –ù–∞–≤—ã–∫–∏ (–û—á–∫–∏: %d)\n\n", m.player.SkillPoints)
	for i, skill := range m.skills {
		cursor := " "
		if m.cursor == i {
			cursor = ">"
		}
		level := m.player.Skills[skill.Name]
		s += fmt.Sprintf("%s %s: %d\n  %s\n\n", cursor, skill.Name, level, skill.Description)
	}
	s += "\n–ù–∞–∂–º–∏—Ç–µ 'enter' –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è, 'q' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.\n"
	return s
}

// --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ ---

func updateClassChoice(msg tea.Msg, m Model) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch msg.String() {
		case "up", "k":
			if m.cursor > 0 {
				m.cursor--
			}
		case "down", "j":
			if m.cursor < len(m.classChoices)-1 {
				m.cursor++
			}
		case "enter":
			chosenClass := m.classChoices[m.cursor]
			m.player.Class = chosenClass.Name
			player.SavePlayer(&m.player) // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä

			m.state = stateQuests
			m.cursor = 0
			m.statusMessage = fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: %s!", chosenClass.Name)
			return m, nil
		}
	}
	return m, nil
}

func viewClassChoice(m Model) string {
	s := "‚öîÔ∏è –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å!\n\n"
	s += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:\n\n"
	for i, class := range m.classChoices {
		cursor := " "
		if m.cursor == i {
			cursor = ">"
		}
		s += fmt.Sprintf("%s %s: %s\n", cursor, class.Name, class.Description)
	}
	s += "\n–ù–∞–∂–º–∏—Ç–µ 'enter' –¥–ª—è –≤—ã–±–æ—Ä–∞. –≠—Ç–æ—Ç –≤—ã–±–æ—Ä –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.\n"
	return s
}
